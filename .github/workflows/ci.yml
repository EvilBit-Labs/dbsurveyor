name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: never
  TERM: dumb

jobs:
  # Check PR titles follow conventional commits
  semantic-pr:
    if: github.event_name == 'pull_request'
    name: Semantic PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            doesn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

  # Linting job
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: lint-${{ hashFiles('**/Cargo.toml') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Testing and coverage job
  test-and-coverage:
    name: Test and Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ hashFiles('**/Cargo.toml') }}

      - name: Run tests with coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info --fail-under-lines 80
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost/testdb
          CARGO_TERM_COLOR: never
          TERM: dumb

      - name: Generate HTML coverage report
        run: cargo llvm-cov --all-features --workspace --html
        env:
          CARGO_TERM_COLOR: never
          TERM: dumb

      - name: Upload lcov.info as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lcov-report
          path: lcov.info
          retention-days: 30

      - name: Upload HTML coverage report as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: html-coverage-report
          path: target/llvm-cov/html/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v6
        id: scan
        with:
          path: "."
          fail-build: true
          severity-cutoff: high

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  # Cross-platform build
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.os }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build
        run: cargo build --release --all-features

      - name: Test binaries exist
        shell: bash
        run: |
          # Test that binaries were created
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            test -f target/release/dbsurveyor-collect.exe
            test -f target/release/dbsurveyor.exe
          else
            test -f target/release/dbsurveyor-collect
            test -f target/release/dbsurveyor
          fi
