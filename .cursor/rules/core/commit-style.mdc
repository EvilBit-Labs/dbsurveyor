---
description:
globs:
alwaysApply: true
---
# Commit Message Style for DBSurveyor

- **Conventional Commits**: All commits must follow [Conventional Commits](https://www.conventionalcommits.org):
    `<type>(<scope>): <description>`
- **Types**: `feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `build`, `ci`, `chore`
- **Scopes**: `(collector)`, `(processor)`, `(shared)`, `(security)`, `(cli)`, `(encryption)`, `(database)`, etc. Required for all commits.
- **Description**:
    - Imperative mood ("add", not "added")
    - No period at the end
    - â‰¤72 characters, capitalized, clear and specific
- **Body (optional)**:
    - Start after a blank line
    - Use itemized lists for multiple changes
    - Explain what/why, not how
- **Footer (optional)**:
    - Start after a blank line
    - Use for issue refs (`Closes #123`) or breaking changes (`BREAKING CHANGE:`)
- **Breaking Changes**:
    - Add `!` after type/scope (e.g., `feat(api)!: ...`) or use `BREAKING CHANGE:` in footer
- **Examples**:
    - `feat(collector): add PostgreSQL schema discovery with connection pooling`
    - `fix(security): prevent credential leakage in error messages`
    - `docs(readme): update installation instructions for Rust 1.77+`
    - `refactor(database): simplify connection management interface`
    - `test(encryption): add AES-GCM randomness validation tests`
    - `chore(deps): update SQLx to v0.7.3 for security patches`
- **CI Compatibility**:
    - All commits must pass `just ci-check` and security validation
    - Use `chore:` for meta or maintenance changes
    - Use `security:` scope for security-related changes

---
This file is for Cursor context only. Do not include in builds or documentation.
